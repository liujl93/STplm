% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PLMfit.R
\name{PLM.fit}
\alias{PLM.fit}
\title{Spatio-Temporal Partial Linear Model and Bandwidth Selection}
\usage{
PLM.fit(loctim, P, X, Z, theta0, CovStructure = 2, Type = 3, bw_l = 0.005,
  bw_u = 0.1, nlam = 30, Sigma = NULL, neigh = Inf)
}
\arguments{
\item{loctim}{(s,t) matrix, the last column is time.}

\item{P}{the dimension of data}

\item{X}{X}

\item{Z}{y}

\item{theta0}{initial covariance paramters (not including sigma2)}

\item{CovStructure}{the covariance structure, 1 - a separable covariance matrix, 2 - a nonseparable covariance matrix}

\item{Type}{Scenario, 1 - GK + GK; 2 - K2 + K2; 3 - K2 + GK}

\item{bw_l, bw_u}{lower and upper limit of bandwidth}

\item{nlam}{number of bandwidth selection grid}

\item{Sigma}{The true covariance matrix}

\item{neigh}{the range of parameter estimation (Inf for stationary case)}
}
\value{
GCVce in detail only, CV samely.
\item{gcvce.bandwidth}{optimal bandwidth selected by GCVce criterion}
\item{gcvce.beta.est}{regression paramters estimator with bandwidth selected by GCVce criterion }
\item{gcvce.theta.est}{covariance paramters estimator with bandwidth selected by GCVce criterion }
\item{gcvce.f.est}{f(t) estimation at all t's with bandwidth selected by GCVce criterion}
\item{gcvce.likelihood}{log profile likelihood with bandwidth selected GCVce criterion}
}
\description{
y(s,t) = X(s,t)'beta + f(t) + eps(s,t)
}
\examples{
setwd("/Users/lolofter/Documents/Research/PLM/realdata/rovstat1")
stat = 1 # <- static site number
h0 = 0.005 # <- lower limit of bandwidth selection
h1 = 0.1  # <- upper limit of bandwidth selection
theta0 = c(0.1,0.5,0.4) # <- initial value of theta (exclude sigma^2)
CovStructure = 2 # <- covariance structure, separable or not
Type = 3 # <- senario III, K2 first, then GK
nlam = 30 # <- grid search, cut number of bandwidth selection.
csv_name = paste0("rovstat",stat,".csv")
realdata = read.csv(csv_name)
loctim = data.frame(realdata$X,realdata$Y,realdata$time) # -> (s,t)
loctim = as.matrix(loctim)
P = nrow(loctim) # -> N
X = cbind(realdata$X,realdata$Y) # -> X
#X = stdize(X0) #
Z = (realdata$Leq) # -> Y
output = PLM.fit(loctim,P,X,Z,theta0,CovStructure=CovStructure,Type=Type,bw_l=h0,bw_u=h1,nlam=nlam)
}
